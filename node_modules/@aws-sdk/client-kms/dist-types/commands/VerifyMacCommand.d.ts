import { EndpointParameterInstructions } from "@aws-sdk/middleware-endpoint";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { KMSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../KMSClient";
import { VerifyMacRequest, VerifyMacResponse } from "../models/models_0";
export interface VerifyMacCommandInput extends VerifyMacRequest {
}
export interface VerifyMacCommandOutput extends VerifyMacResponse, __MetadataBearer {
}
/**
 * <p>Verifies the hash-based message authentication code (HMAC) for a specified message, HMAC
 *       KMS key, and MAC algorithm. To verify the HMAC, <code>VerifyMac</code> computes an HMAC using
 *       the message, HMAC KMS key, and MAC algorithm that you specify, and compares the computed HMAC
 *       to the HMAC that you specify. If the HMACs are identical, the verification succeeds;
 *       otherwise, it fails. Verification indicates that the message hasn't changed since the HMAC was
 *       calculated, and the specified key was used to generate and verify the HMAC.</p>
 *          <p>HMAC KMS keys and the HMAC algorithms that KMS uses conform to industry standards
 *       defined in <a href="https://datatracker.ietf.org/doc/html/rfc2104">RFC 2104</a>.</p>
 *          <p>This operation is part of KMS support for HMAC KMS keys. For details, see
 *         <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC keys in KMS</a> in the
 *       <i>Key Management Service Developer Guide</i>.</p>
 *          <p>The KMS key that you use for this operation must be in a compatible key state. For
 * details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.</p>
 *          <p>
 *             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different Amazon Web Services account, specify
 *   the key ARN or alias ARN in the value of the <code>KeyId</code> parameter. </p>
 *
 *          <p>
 *             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:VerifyMac</a> (key policy)</p>
 *          <p>
 *             <b>Related operations</b>: <a>GenerateMac</a>
 *          </p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { KMSClient, VerifyMacCommand } from "@aws-sdk/client-kms"; // ES Modules import
 * // const { KMSClient, VerifyMacCommand } = require("@aws-sdk/client-kms"); // CommonJS import
 * const client = new KMSClient(config);
 * const command = new VerifyMacCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link VerifyMacCommandInput} for command's `input` shape.
 * @see {@link VerifyMacCommandOutput} for command's `response` shape.
 * @see {@link KMSClientResolvedConfig | config} for KMSClient's `config` shape.
 *
 */
export declare class VerifyMacCommand extends $Command<VerifyMacCommandInput, VerifyMacCommandOutput, KMSClientResolvedConfig> {
    readonly input: VerifyMacCommandInput;
    static getEndpointParameterInstructions(): EndpointParameterInstructions;
    constructor(input: VerifyMacCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<VerifyMacCommandInput, VerifyMacCommandOutput>;
    private serialize;
    private deserialize;
}
