import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import { ECRServiceException as __BaseException } from "./ECRServiceException";
export interface BatchCheckLayerAvailabilityRequest {
  registryId?: string;
  repositoryName: string | undefined;
  layerDigests: string[] | undefined;
}
export declare enum LayerFailureCode {
  InvalidLayerDigest = "InvalidLayerDigest",
  MissingLayerDigest = "MissingLayerDigest",
}
export interface LayerFailure {
  layerDigest?: string;
  failureCode?: LayerFailureCode | string;
  failureReason?: string;
}
export declare enum LayerAvailability {
  AVAILABLE = "AVAILABLE",
  UNAVAILABLE = "UNAVAILABLE",
}
export interface Layer {
  layerDigest?: string;
  layerAvailability?: LayerAvailability | string;
  layerSize?: number;
  mediaType?: string;
}
export interface BatchCheckLayerAvailabilityResponse {
  layers?: Layer[];
  failures?: LayerFailure[];
}
export declare class InvalidParameterException extends __BaseException {
  readonly name: "InvalidParameterException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidParameterException, __BaseException>
  );
}
export declare class RepositoryNotFoundException extends __BaseException {
  readonly name: "RepositoryNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<RepositoryNotFoundException, __BaseException>
  );
}
export declare class ServerException extends __BaseException {
  readonly name: "ServerException";
  readonly $fault: "server";
  constructor(opts: __ExceptionOptionType<ServerException, __BaseException>);
}
export interface ImageIdentifier {
  imageDigest?: string;
  imageTag?: string;
}
export interface BatchDeleteImageRequest {
  registryId?: string;
  repositoryName: string | undefined;
  imageIds: ImageIdentifier[] | undefined;
}
export declare enum ImageFailureCode {
  ImageNotFound = "ImageNotFound",
  ImageReferencedByManifestList = "ImageReferencedByManifestList",
  ImageTagDoesNotMatchDigest = "ImageTagDoesNotMatchDigest",
  InvalidImageDigest = "InvalidImageDigest",
  InvalidImageTag = "InvalidImageTag",
  KmsError = "KmsError",
  MissingDigestAndTag = "MissingDigestAndTag",
}
export interface ImageFailure {
  imageId?: ImageIdentifier;
  failureCode?: ImageFailureCode | string;
  failureReason?: string;
}
export interface BatchDeleteImageResponse {
  imageIds?: ImageIdentifier[];
  failures?: ImageFailure[];
}
export interface BatchGetImageRequest {
  registryId?: string;
  repositoryName: string | undefined;
  imageIds: ImageIdentifier[] | undefined;
  acceptedMediaTypes?: string[];
}
export interface Image {
  registryId?: string;
  repositoryName?: string;
  imageId?: ImageIdentifier;
  imageManifest?: string;
  imageManifestMediaType?: string;
}
export interface BatchGetImageResponse {
  images?: Image[];
  failures?: ImageFailure[];
}
export interface BatchGetRepositoryScanningConfigurationRequest {
  repositoryNames: string[] | undefined;
}
export declare enum ScanningConfigurationFailureCode {
  REPOSITORY_NOT_FOUND = "REPOSITORY_NOT_FOUND",
}
export interface RepositoryScanningConfigurationFailure {
  repositoryName?: string;
  failureCode?: ScanningConfigurationFailureCode | string;
  failureReason?: string;
}
export declare enum ScanningRepositoryFilterType {
  WILDCARD = "WILDCARD",
}
export interface ScanningRepositoryFilter {
  filter: string | undefined;
  filterType: ScanningRepositoryFilterType | string | undefined;
}
export declare enum ScanFrequency {
  CONTINUOUS_SCAN = "CONTINUOUS_SCAN",
  MANUAL = "MANUAL",
  SCAN_ON_PUSH = "SCAN_ON_PUSH",
}
export interface RepositoryScanningConfiguration {
  repositoryArn?: string;
  repositoryName?: string;
  scanOnPush?: boolean;
  scanFrequency?: ScanFrequency | string;
  appliedScanFilters?: ScanningRepositoryFilter[];
}
export interface BatchGetRepositoryScanningConfigurationResponse {
  scanningConfigurations?: RepositoryScanningConfiguration[];
  failures?: RepositoryScanningConfigurationFailure[];
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface CompleteLayerUploadRequest {
  registryId?: string;
  repositoryName: string | undefined;
  uploadId: string | undefined;
  layerDigests: string[] | undefined;
}
export interface CompleteLayerUploadResponse {
  registryId?: string;
  repositoryName?: string;
  uploadId?: string;
  layerDigest?: string;
}
export declare class EmptyUploadException extends __BaseException {
  readonly name: "EmptyUploadException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<EmptyUploadException, __BaseException>
  );
}
export declare class InvalidLayerException extends __BaseException {
  readonly name: "InvalidLayerException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidLayerException, __BaseException>
  );
}
export declare class KmsException extends __BaseException {
  readonly name: "KmsException";
  readonly $fault: "client";
  kmsError?: string;
  constructor(opts: __ExceptionOptionType<KmsException, __BaseException>);
}
export declare class LayerAlreadyExistsException extends __BaseException {
  readonly name: "LayerAlreadyExistsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<LayerAlreadyExistsException, __BaseException>
  );
}
export declare class LayerPartTooSmallException extends __BaseException {
  readonly name: "LayerPartTooSmallException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<LayerPartTooSmallException, __BaseException>
  );
}
export declare class UploadNotFoundException extends __BaseException {
  readonly name: "UploadNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<UploadNotFoundException, __BaseException>
  );
}
export interface CreatePullThroughCacheRuleRequest {
  ecrRepositoryPrefix: string | undefined;
  upstreamRegistryUrl: string | undefined;
  registryId?: string;
}
export interface CreatePullThroughCacheRuleResponse {
  ecrRepositoryPrefix?: string;
  upstreamRegistryUrl?: string;
  createdAt?: Date;
  registryId?: string;
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export declare class PullThroughCacheRuleAlreadyExistsException extends __BaseException {
  readonly name: "PullThroughCacheRuleAlreadyExistsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      PullThroughCacheRuleAlreadyExistsException,
      __BaseException
    >
  );
}
export declare class UnsupportedUpstreamRegistryException extends __BaseException {
  readonly name: "UnsupportedUpstreamRegistryException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      UnsupportedUpstreamRegistryException,
      __BaseException
    >
  );
}
export declare enum EncryptionType {
  AES256 = "AES256",
  KMS = "KMS",
}
export interface EncryptionConfiguration {
  encryptionType: EncryptionType | string | undefined;
  kmsKey?: string;
}
export interface ImageScanningConfiguration {
  scanOnPush?: boolean;
}
export declare enum ImageTagMutability {
  IMMUTABLE = "IMMUTABLE",
  MUTABLE = "MUTABLE",
}
export interface Tag {
  Key?: string;
  Value?: string;
}
export interface CreateRepositoryRequest {
  registryId?: string;
  repositoryName: string | undefined;
  tags?: Tag[];
  imageTagMutability?: ImageTagMutability | string;
  imageScanningConfiguration?: ImageScanningConfiguration;
  encryptionConfiguration?: EncryptionConfiguration;
}
export interface Repository {
  repositoryArn?: string;
  registryId?: string;
  repositoryName?: string;
  repositoryUri?: string;
  createdAt?: Date;
  imageTagMutability?: ImageTagMutability | string;
  imageScanningConfiguration?: ImageScanningConfiguration;
  encryptionConfiguration?: EncryptionConfiguration;
}
export interface CreateRepositoryResponse {
  repository?: Repository;
}
export declare class InvalidTagParameterException extends __BaseException {
  readonly name: "InvalidTagParameterException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidTagParameterException, __BaseException>
  );
}
export declare class RepositoryAlreadyExistsException extends __BaseException {
  readonly name: "RepositoryAlreadyExistsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      RepositoryAlreadyExistsException,
      __BaseException
    >
  );
}
export declare class TooManyTagsException extends __BaseException {
  readonly name: "TooManyTagsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<TooManyTagsException, __BaseException>
  );
}
export interface DeleteLifecyclePolicyRequest {
  registryId?: string;
  repositoryName: string | undefined;
}
export interface DeleteLifecyclePolicyResponse {
  registryId?: string;
  repositoryName?: string;
  lifecyclePolicyText?: string;
  lastEvaluatedAt?: Date;
}
export declare class LifecyclePolicyNotFoundException extends __BaseException {
  readonly name: "LifecyclePolicyNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      LifecyclePolicyNotFoundException,
      __BaseException
    >
  );
}
export interface DeletePullThroughCacheRuleRequest {
  ecrRepositoryPrefix: string | undefined;
  registryId?: string;
}
export interface DeletePullThroughCacheRuleResponse {
  ecrRepositoryPrefix?: string;
  upstreamRegistryUrl?: string;
  createdAt?: Date;
  registryId?: string;
}
export declare class PullThroughCacheRuleNotFoundException extends __BaseException {
  readonly name: "PullThroughCacheRuleNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      PullThroughCacheRuleNotFoundException,
      __BaseException
    >
  );
}
export interface DeleteRegistryPolicyRequest {}
export interface DeleteRegistryPolicyResponse {
  registryId?: string;
  policyText?: string;
}
export declare class RegistryPolicyNotFoundException extends __BaseException {
  readonly name: "RegistryPolicyNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      RegistryPolicyNotFoundException,
      __BaseException
    >
  );
}
export interface DeleteRepositoryRequest {
  registryId?: string;
  repositoryName: string | undefined;
  force?: boolean;
}
export interface DeleteRepositoryResponse {
  repository?: Repository;
}
export declare class RepositoryNotEmptyException extends __BaseException {
  readonly name: "RepositoryNotEmptyException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<RepositoryNotEmptyException, __BaseException>
  );
}
export interface DeleteRepositoryPolicyRequest {
  registryId?: string;
  repositoryName: string | undefined;
}
export interface DeleteRepositoryPolicyResponse {
  registryId?: string;
  repositoryName?: string;
  policyText?: string;
}
export declare class RepositoryPolicyNotFoundException extends __BaseException {
  readonly name: "RepositoryPolicyNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      RepositoryPolicyNotFoundException,
      __BaseException
    >
  );
}
export interface DescribeImageReplicationStatusRequest {
  repositoryName: string | undefined;
  imageId: ImageIdentifier | undefined;
  registryId?: string;
}
export declare enum ReplicationStatus {
  COMPLETE = "COMPLETE",
  FAILED = "FAILED",
  IN_PROGRESS = "IN_PROGRESS",
}
export interface ImageReplicationStatus {
  region?: string;
  registryId?: string;
  status?: ReplicationStatus | string;
  failureCode?: string;
}
export interface DescribeImageReplicationStatusResponse {
  repositoryName?: string;
  imageId?: ImageIdentifier;
  replicationStatuses?: ImageReplicationStatus[];
}
export declare class ImageNotFoundException extends __BaseException {
  readonly name: "ImageNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ImageNotFoundException, __BaseException>
  );
}
export declare enum TagStatus {
  ANY = "ANY",
  TAGGED = "TAGGED",
  UNTAGGED = "UNTAGGED",
}
export interface DescribeImagesFilter {
  tagStatus?: TagStatus | string;
}
export interface DescribeImagesRequest {
  registryId?: string;
  repositoryName: string | undefined;
  imageIds?: ImageIdentifier[];
  nextToken?: string;
  maxResults?: number;
  filter?: DescribeImagesFilter;
}
export declare enum FindingSeverity {
  CRITICAL = "CRITICAL",
  HIGH = "HIGH",
  INFORMATIONAL = "INFORMATIONAL",
  LOW = "LOW",
  MEDIUM = "MEDIUM",
  UNDEFINED = "UNDEFINED",
}
export interface ImageScanFindingsSummary {
  imageScanCompletedAt?: Date;
  vulnerabilitySourceUpdatedAt?: Date;
  findingSeverityCounts?: Record<string, number>;
}
export declare enum ScanStatus {
  ACTIVE = "ACTIVE",
  COMPLETE = "COMPLETE",
  FAILED = "FAILED",
  FINDINGS_UNAVAILABLE = "FINDINGS_UNAVAILABLE",
  IN_PROGRESS = "IN_PROGRESS",
  PENDING = "PENDING",
  SCAN_ELIGIBILITY_EXPIRED = "SCAN_ELIGIBILITY_EXPIRED",
  UNSUPPORTED_IMAGE = "UNSUPPORTED_IMAGE",
}
export interface ImageScanStatus {
  status?: ScanStatus | string;
  description?: string;
}
export interface ImageDetail {
  registryId?: string;
  repositoryName?: string;
  imageDigest?: string;
  imageTags?: string[];
  imageSizeInBytes?: number;
  imagePushedAt?: Date;
  imageScanStatus?: ImageScanStatus;
  imageScanFindingsSummary?: ImageScanFindingsSummary;
  imageManifestMediaType?: string;
  artifactMediaType?: string;
  lastRecordedPullTime?: Date;
}
export interface DescribeImagesResponse {
  imageDetails?: ImageDetail[];
  nextToken?: string;
}
export interface DescribeImageScanFindingsRequest {
  registryId?: string;
  repositoryName: string | undefined;
  imageId: ImageIdentifier | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface CvssScore {
  baseScore?: number;
  scoringVector?: string;
  source?: string;
  version?: string;
}
export interface VulnerablePackage {
  arch?: string;
  epoch?: number;
  filePath?: string;
  name?: string;
  packageManager?: string;
  release?: string;
  sourceLayerHash?: string;
  version?: string;
}
export interface PackageVulnerabilityDetails {
  cvss?: CvssScore[];
  referenceUrls?: string[];
  relatedVulnerabilities?: string[];
  source?: string;
  sourceUrl?: string;
  vendorCreatedAt?: Date;
  vendorSeverity?: string;
  vendorUpdatedAt?: Date;
  vulnerabilityId?: string;
  vulnerablePackages?: VulnerablePackage[];
}
export interface Recommendation {
  url?: string;
  text?: string;
}
export interface Remediation {
  recommendation?: Recommendation;
}
export interface AwsEcrContainerImageDetails {
  architecture?: string;
  author?: string;
  imageHash?: string;
  imageTags?: string[];
  platform?: string;
  pushedAt?: Date;
  registry?: string;
  repositoryName?: string;
}
export interface ResourceDetails {
  awsEcrContainerImage?: AwsEcrContainerImageDetails;
}
export interface Resource {
  details?: ResourceDetails;
  id?: string;
  tags?: Record<string, string>;
  type?: string;
}
export interface CvssScoreAdjustment {
  metric?: string;
  reason?: string;
}
export interface CvssScoreDetails {
  adjustments?: CvssScoreAdjustment[];
  score?: number;
  scoreSource?: string;
  scoringVector?: string;
  version?: string;
}
export interface ScoreDetails {
  cvss?: CvssScoreDetails;
}
export interface EnhancedImageScanFinding {
  awsAccountId?: string;
  description?: string;
  findingArn?: string;
  firstObservedAt?: Date;
  lastObservedAt?: Date;
  packageVulnerabilityDetails?: PackageVulnerabilityDetails;
  remediation?: Remediation;
  resources?: Resource[];
  score?: number;
  scoreDetails?: ScoreDetails;
  severity?: string;
  status?: string;
  title?: string;
  type?: string;
  updatedAt?: Date;
}
export interface Attribute {
  key: string | undefined;
  value?: string;
}
export interface ImageScanFinding {
  name?: string;
  description?: string;
  uri?: string;
  severity?: FindingSeverity | string;
  attributes?: Attribute[];
}
export interface ImageScanFindings {
  imageScanCompletedAt?: Date;
  vulnerabilitySourceUpdatedAt?: Date;
  findingSeverityCounts?: Record<string, number>;
  findings?: ImageScanFinding[];
  enhancedFindings?: EnhancedImageScanFinding[];
}
export interface DescribeImageScanFindingsResponse {
  registryId?: string;
  repositoryName?: string;
  imageId?: ImageIdentifier;
  imageScanStatus?: ImageScanStatus;
  imageScanFindings?: ImageScanFindings;
  nextToken?: string;
}
export declare class ScanNotFoundException extends __BaseException {
  readonly name: "ScanNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ScanNotFoundException, __BaseException>
  );
}
export interface DescribePullThroughCacheRulesRequest {
  registryId?: string;
  ecrRepositoryPrefixes?: string[];
  nextToken?: string;
  maxResults?: number;
}
export interface PullThroughCacheRule {
  ecrRepositoryPrefix?: string;
  upstreamRegistryUrl?: string;
  createdAt?: Date;
  registryId?: string;
}
export interface DescribePullThroughCacheRulesResponse {
  pullThroughCacheRules?: PullThroughCacheRule[];
  nextToken?: string;
}
export interface DescribeRegistryRequest {}
export interface ReplicationDestination {
  region: string | undefined;
  registryId: string | undefined;
}
export declare enum RepositoryFilterType {
  PREFIX_MATCH = "PREFIX_MATCH",
}
export interface RepositoryFilter {
  filter: string | undefined;
  filterType: RepositoryFilterType | string | undefined;
}
export interface ReplicationRule {
  destinations: ReplicationDestination[] | undefined;
  repositoryFilters?: RepositoryFilter[];
}
export interface ReplicationConfiguration {
  rules: ReplicationRule[] | undefined;
}
export interface DescribeRegistryResponse {
  registryId?: string;
  replicationConfiguration?: ReplicationConfiguration;
}
export interface DescribeRepositoriesRequest {
  registryId?: string;
  repositoryNames?: string[];
  nextToken?: string;
  maxResults?: number;
}
export interface DescribeRepositoriesResponse {
  repositories?: Repository[];
  nextToken?: string;
}
export interface GetAuthorizationTokenRequest {
  registryIds?: string[];
}
export interface AuthorizationData {
  authorizationToken?: string;
  expiresAt?: Date;
  proxyEndpoint?: string;
}
export interface GetAuthorizationTokenResponse {
  authorizationData?: AuthorizationData[];
}
export interface GetDownloadUrlForLayerRequest {
  registryId?: string;
  repositoryName: string | undefined;
  layerDigest: string | undefined;
}
export interface GetDownloadUrlForLayerResponse {
  downloadUrl?: string;
  layerDigest?: string;
}
export declare class LayerInaccessibleException extends __BaseException {
  readonly name: "LayerInaccessibleException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<LayerInaccessibleException, __BaseException>
  );
}
export declare class LayersNotFoundException extends __BaseException {
  readonly name: "LayersNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<LayersNotFoundException, __BaseException>
  );
}
export interface GetLifecyclePolicyRequest {
  registryId?: string;
  repositoryName: string | undefined;
}
export interface GetLifecyclePolicyResponse {
  registryId?: string;
  repositoryName?: string;
  lifecyclePolicyText?: string;
  lastEvaluatedAt?: Date;
}
export interface LifecyclePolicyPreviewFilter {
  tagStatus?: TagStatus | string;
}
export interface GetLifecyclePolicyPreviewRequest {
  registryId?: string;
  repositoryName: string | undefined;
  imageIds?: ImageIdentifier[];
  nextToken?: string;
  maxResults?: number;
  filter?: LifecyclePolicyPreviewFilter;
}
export declare enum ImageActionType {
  EXPIRE = "EXPIRE",
}
export interface LifecyclePolicyRuleAction {
  type?: ImageActionType | string;
}
export interface LifecyclePolicyPreviewResult {
  imageTags?: string[];
  imageDigest?: string;
  imagePushedAt?: Date;
  action?: LifecyclePolicyRuleAction;
  appliedRulePriority?: number;
}
export declare enum LifecyclePolicyPreviewStatus {
  COMPLETE = "COMPLETE",
  EXPIRED = "EXPIRED",
  FAILED = "FAILED",
  IN_PROGRESS = "IN_PROGRESS",
}
export interface LifecyclePolicyPreviewSummary {
  expiringImageTotalCount?: number;
}
export interface GetLifecyclePolicyPreviewResponse {
  registryId?: string;
  repositoryName?: string;
  lifecyclePolicyText?: string;
  status?: LifecyclePolicyPreviewStatus | string;
  nextToken?: string;
  previewResults?: LifecyclePolicyPreviewResult[];
  summary?: LifecyclePolicyPreviewSummary;
}
export declare class LifecyclePolicyPreviewNotFoundException extends __BaseException {
  readonly name: "LifecyclePolicyPreviewNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      LifecyclePolicyPreviewNotFoundException,
      __BaseException
    >
  );
}
export interface GetRegistryPolicyRequest {}
export interface GetRegistryPolicyResponse {
  registryId?: string;
  policyText?: string;
}
export interface GetRegistryScanningConfigurationRequest {}
export interface RegistryScanningRule {
  scanFrequency: ScanFrequency | string | undefined;
  repositoryFilters: ScanningRepositoryFilter[] | undefined;
}
export declare enum ScanType {
  BASIC = "BASIC",
  ENHANCED = "ENHANCED",
}
export interface RegistryScanningConfiguration {
  scanType?: ScanType | string;
  rules?: RegistryScanningRule[];
}
export interface GetRegistryScanningConfigurationResponse {
  registryId?: string;
  scanningConfiguration?: RegistryScanningConfiguration;
}
export interface GetRepositoryPolicyRequest {
  registryId?: string;
  repositoryName: string | undefined;
}
export interface GetRepositoryPolicyResponse {
  registryId?: string;
  repositoryName?: string;
  policyText?: string;
}
export interface InitiateLayerUploadRequest {
  registryId?: string;
  repositoryName: string | undefined;
}
export interface InitiateLayerUploadResponse {
  uploadId?: string;
  partSize?: number;
}
export interface ListImagesFilter {
  tagStatus?: TagStatus | string;
}
export interface ListImagesRequest {
  registryId?: string;
  repositoryName: string | undefined;
  nextToken?: string;
  maxResults?: number;
  filter?: ListImagesFilter;
}
export interface ListImagesResponse {
  imageIds?: ImageIdentifier[];
  nextToken?: string;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags?: Tag[];
}
export declare class ImageAlreadyExistsException extends __BaseException {
  readonly name: "ImageAlreadyExistsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ImageAlreadyExistsException, __BaseException>
  );
}
export declare class ImageDigestDoesNotMatchException extends __BaseException {
  readonly name: "ImageDigestDoesNotMatchException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      ImageDigestDoesNotMatchException,
      __BaseException
    >
  );
}
export declare class ImageTagAlreadyExistsException extends __BaseException {
  readonly name: "ImageTagAlreadyExistsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ImageTagAlreadyExistsException, __BaseException>
  );
}
export interface PutImageRequest {
  registryId?: string;
  repositoryName: string | undefined;
  imageManifest: string | undefined;
  imageManifestMediaType?: string;
  imageTag?: string;
  imageDigest?: string;
}
export interface PutImageResponse {
  image?: Image;
}
export declare class ReferencedImagesNotFoundException extends __BaseException {
  readonly name: "ReferencedImagesNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      ReferencedImagesNotFoundException,
      __BaseException
    >
  );
}
export interface PutImageScanningConfigurationRequest {
  registryId?: string;
  repositoryName: string | undefined;
  imageScanningConfiguration: ImageScanningConfiguration | undefined;
}
export interface PutImageScanningConfigurationResponse {
  registryId?: string;
  repositoryName?: string;
  imageScanningConfiguration?: ImageScanningConfiguration;
}
export interface PutImageTagMutabilityRequest {
  registryId?: string;
  repositoryName: string | undefined;
  imageTagMutability: ImageTagMutability | string | undefined;
}
export interface PutImageTagMutabilityResponse {
  registryId?: string;
  repositoryName?: string;
  imageTagMutability?: ImageTagMutability | string;
}
export interface PutLifecyclePolicyRequest {
  registryId?: string;
  repositoryName: string | undefined;
  lifecyclePolicyText: string | undefined;
}
export interface PutLifecyclePolicyResponse {
  registryId?: string;
  repositoryName?: string;
  lifecyclePolicyText?: string;
}
export interface PutRegistryPolicyRequest {
  policyText: string | undefined;
}
export interface PutRegistryPolicyResponse {
  registryId?: string;
  policyText?: string;
}
export interface PutRegistryScanningConfigurationRequest {
  scanType?: ScanType | string;
  rules?: RegistryScanningRule[];
}
export interface PutRegistryScanningConfigurationResponse {
  registryScanningConfiguration?: RegistryScanningConfiguration;
}
export interface PutReplicationConfigurationRequest {
  replicationConfiguration: ReplicationConfiguration | undefined;
}
export interface PutReplicationConfigurationResponse {
  replicationConfiguration?: ReplicationConfiguration;
}
export interface SetRepositoryPolicyRequest {
  registryId?: string;
  repositoryName: string | undefined;
  policyText: string | undefined;
  force?: boolean;
}
export interface SetRepositoryPolicyResponse {
  registryId?: string;
  repositoryName?: string;
  policyText?: string;
}
export interface StartImageScanRequest {
  registryId?: string;
  repositoryName: string | undefined;
  imageId: ImageIdentifier | undefined;
}
export interface StartImageScanResponse {
  registryId?: string;
  repositoryName?: string;
  imageId?: ImageIdentifier;
  imageScanStatus?: ImageScanStatus;
}
export declare class UnsupportedImageTypeException extends __BaseException {
  readonly name: "UnsupportedImageTypeException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<UnsupportedImageTypeException, __BaseException>
  );
}
export declare class LifecyclePolicyPreviewInProgressException extends __BaseException {
  readonly name: "LifecyclePolicyPreviewInProgressException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      LifecyclePolicyPreviewInProgressException,
      __BaseException
    >
  );
}
export interface StartLifecyclePolicyPreviewRequest {
  registryId?: string;
  repositoryName: string | undefined;
  lifecyclePolicyText?: string;
}
export interface StartLifecyclePolicyPreviewResponse {
  registryId?: string;
  repositoryName?: string;
  lifecyclePolicyText?: string;
  status?: LifecyclePolicyPreviewStatus | string;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Tag[] | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export declare class InvalidLayerPartException extends __BaseException {
  readonly name: "InvalidLayerPartException";
  readonly $fault: "client";
  registryId?: string;
  repositoryName?: string;
  uploadId?: string;
  lastValidByteReceived?: number;
  constructor(
    opts: __ExceptionOptionType<InvalidLayerPartException, __BaseException>
  );
}
export interface UploadLayerPartRequest {
  registryId?: string;
  repositoryName: string | undefined;
  uploadId: string | undefined;
  partFirstByte: number | undefined;
  partLastByte: number | undefined;
  layerPartBlob: Uint8Array | undefined;
}
export interface UploadLayerPartResponse {
  registryId?: string;
  repositoryName?: string;
  uploadId?: string;
  lastByteReceived?: number;
}
export declare const BatchCheckLayerAvailabilityRequestFilterSensitiveLog: (
  obj: BatchCheckLayerAvailabilityRequest
) => any;
export declare const LayerFailureFilterSensitiveLog: (obj: LayerFailure) => any;
export declare const LayerFilterSensitiveLog: (obj: Layer) => any;
export declare const BatchCheckLayerAvailabilityResponseFilterSensitiveLog: (
  obj: BatchCheckLayerAvailabilityResponse
) => any;
export declare const ImageIdentifierFilterSensitiveLog: (
  obj: ImageIdentifier
) => any;
export declare const BatchDeleteImageRequestFilterSensitiveLog: (
  obj: BatchDeleteImageRequest
) => any;
export declare const ImageFailureFilterSensitiveLog: (obj: ImageFailure) => any;
export declare const BatchDeleteImageResponseFilterSensitiveLog: (
  obj: BatchDeleteImageResponse
) => any;
export declare const BatchGetImageRequestFilterSensitiveLog: (
  obj: BatchGetImageRequest
) => any;
export declare const ImageFilterSensitiveLog: (obj: Image) => any;
export declare const BatchGetImageResponseFilterSensitiveLog: (
  obj: BatchGetImageResponse
) => any;
export declare const BatchGetRepositoryScanningConfigurationRequestFilterSensitiveLog: (
  obj: BatchGetRepositoryScanningConfigurationRequest
) => any;
export declare const RepositoryScanningConfigurationFailureFilterSensitiveLog: (
  obj: RepositoryScanningConfigurationFailure
) => any;
export declare const ScanningRepositoryFilterFilterSensitiveLog: (
  obj: ScanningRepositoryFilter
) => any;
export declare const RepositoryScanningConfigurationFilterSensitiveLog: (
  obj: RepositoryScanningConfiguration
) => any;
export declare const BatchGetRepositoryScanningConfigurationResponseFilterSensitiveLog: (
  obj: BatchGetRepositoryScanningConfigurationResponse
) => any;
export declare const CompleteLayerUploadRequestFilterSensitiveLog: (
  obj: CompleteLayerUploadRequest
) => any;
export declare const CompleteLayerUploadResponseFilterSensitiveLog: (
  obj: CompleteLayerUploadResponse
) => any;
export declare const CreatePullThroughCacheRuleRequestFilterSensitiveLog: (
  obj: CreatePullThroughCacheRuleRequest
) => any;
export declare const CreatePullThroughCacheRuleResponseFilterSensitiveLog: (
  obj: CreatePullThroughCacheRuleResponse
) => any;
export declare const EncryptionConfigurationFilterSensitiveLog: (
  obj: EncryptionConfiguration
) => any;
export declare const ImageScanningConfigurationFilterSensitiveLog: (
  obj: ImageScanningConfiguration
) => any;
export declare const TagFilterSensitiveLog: (obj: Tag) => any;
export declare const CreateRepositoryRequestFilterSensitiveLog: (
  obj: CreateRepositoryRequest
) => any;
export declare const RepositoryFilterSensitiveLog: (obj: Repository) => any;
export declare const CreateRepositoryResponseFilterSensitiveLog: (
  obj: CreateRepositoryResponse
) => any;
export declare const DeleteLifecyclePolicyRequestFilterSensitiveLog: (
  obj: DeleteLifecyclePolicyRequest
) => any;
export declare const DeleteLifecyclePolicyResponseFilterSensitiveLog: (
  obj: DeleteLifecyclePolicyResponse
) => any;
export declare const DeletePullThroughCacheRuleRequestFilterSensitiveLog: (
  obj: DeletePullThroughCacheRuleRequest
) => any;
export declare const DeletePullThroughCacheRuleResponseFilterSensitiveLog: (
  obj: DeletePullThroughCacheRuleResponse
) => any;
export declare const DeleteRegistryPolicyRequestFilterSensitiveLog: (
  obj: DeleteRegistryPolicyRequest
) => any;
export declare const DeleteRegistryPolicyResponseFilterSensitiveLog: (
  obj: DeleteRegistryPolicyResponse
) => any;
export declare const DeleteRepositoryRequestFilterSensitiveLog: (
  obj: DeleteRepositoryRequest
) => any;
export declare const DeleteRepositoryResponseFilterSensitiveLog: (
  obj: DeleteRepositoryResponse
) => any;
export declare const DeleteRepositoryPolicyRequestFilterSensitiveLog: (
  obj: DeleteRepositoryPolicyRequest
) => any;
export declare const DeleteRepositoryPolicyResponseFilterSensitiveLog: (
  obj: DeleteRepositoryPolicyResponse
) => any;
export declare const DescribeImageReplicationStatusRequestFilterSensitiveLog: (
  obj: DescribeImageReplicationStatusRequest
) => any;
export declare const ImageReplicationStatusFilterSensitiveLog: (
  obj: ImageReplicationStatus
) => any;
export declare const DescribeImageReplicationStatusResponseFilterSensitiveLog: (
  obj: DescribeImageReplicationStatusResponse
) => any;
export declare const DescribeImagesFilterFilterSensitiveLog: (
  obj: DescribeImagesFilter
) => any;
export declare const DescribeImagesRequestFilterSensitiveLog: (
  obj: DescribeImagesRequest
) => any;
export declare const ImageScanFindingsSummaryFilterSensitiveLog: (
  obj: ImageScanFindingsSummary
) => any;
export declare const ImageScanStatusFilterSensitiveLog: (
  obj: ImageScanStatus
) => any;
export declare const ImageDetailFilterSensitiveLog: (obj: ImageDetail) => any;
export declare const DescribeImagesResponseFilterSensitiveLog: (
  obj: DescribeImagesResponse
) => any;
export declare const DescribeImageScanFindingsRequestFilterSensitiveLog: (
  obj: DescribeImageScanFindingsRequest
) => any;
export declare const CvssScoreFilterSensitiveLog: (obj: CvssScore) => any;
export declare const VulnerablePackageFilterSensitiveLog: (
  obj: VulnerablePackage
) => any;
export declare const PackageVulnerabilityDetailsFilterSensitiveLog: (
  obj: PackageVulnerabilityDetails
) => any;
export declare const RecommendationFilterSensitiveLog: (
  obj: Recommendation
) => any;
export declare const RemediationFilterSensitiveLog: (obj: Remediation) => any;
export declare const AwsEcrContainerImageDetailsFilterSensitiveLog: (
  obj: AwsEcrContainerImageDetails
) => any;
export declare const ResourceDetailsFilterSensitiveLog: (
  obj: ResourceDetails
) => any;
export declare const ResourceFilterSensitiveLog: (obj: Resource) => any;
export declare const CvssScoreAdjustmentFilterSensitiveLog: (
  obj: CvssScoreAdjustment
) => any;
export declare const CvssScoreDetailsFilterSensitiveLog: (
  obj: CvssScoreDetails
) => any;
export declare const ScoreDetailsFilterSensitiveLog: (obj: ScoreDetails) => any;
export declare const EnhancedImageScanFindingFilterSensitiveLog: (
  obj: EnhancedImageScanFinding
) => any;
export declare const AttributeFilterSensitiveLog: (obj: Attribute) => any;
export declare const ImageScanFindingFilterSensitiveLog: (
  obj: ImageScanFinding
) => any;
export declare const ImageScanFindingsFilterSensitiveLog: (
  obj: ImageScanFindings
) => any;
export declare const DescribeImageScanFindingsResponseFilterSensitiveLog: (
  obj: DescribeImageScanFindingsResponse
) => any;
export declare const DescribePullThroughCacheRulesRequestFilterSensitiveLog: (
  obj: DescribePullThroughCacheRulesRequest
) => any;
export declare const PullThroughCacheRuleFilterSensitiveLog: (
  obj: PullThroughCacheRule
) => any;
export declare const DescribePullThroughCacheRulesResponseFilterSensitiveLog: (
  obj: DescribePullThroughCacheRulesResponse
) => any;
export declare const DescribeRegistryRequestFilterSensitiveLog: (
  obj: DescribeRegistryRequest
) => any;
export declare const ReplicationDestinationFilterSensitiveLog: (
  obj: ReplicationDestination
) => any;
export declare const RepositoryFilterFilterSensitiveLog: (
  obj: RepositoryFilter
) => any;
export declare const ReplicationRuleFilterSensitiveLog: (
  obj: ReplicationRule
) => any;
export declare const ReplicationConfigurationFilterSensitiveLog: (
  obj: ReplicationConfiguration
) => any;
export declare const DescribeRegistryResponseFilterSensitiveLog: (
  obj: DescribeRegistryResponse
) => any;
export declare const DescribeRepositoriesRequestFilterSensitiveLog: (
  obj: DescribeRepositoriesRequest
) => any;
export declare const DescribeRepositoriesResponseFilterSensitiveLog: (
  obj: DescribeRepositoriesResponse
) => any;
export declare const GetAuthorizationTokenRequestFilterSensitiveLog: (
  obj: GetAuthorizationTokenRequest
) => any;
export declare const AuthorizationDataFilterSensitiveLog: (
  obj: AuthorizationData
) => any;
export declare const GetAuthorizationTokenResponseFilterSensitiveLog: (
  obj: GetAuthorizationTokenResponse
) => any;
export declare const GetDownloadUrlForLayerRequestFilterSensitiveLog: (
  obj: GetDownloadUrlForLayerRequest
) => any;
export declare const GetDownloadUrlForLayerResponseFilterSensitiveLog: (
  obj: GetDownloadUrlForLayerResponse
) => any;
export declare const GetLifecyclePolicyRequestFilterSensitiveLog: (
  obj: GetLifecyclePolicyRequest
) => any;
export declare const GetLifecyclePolicyResponseFilterSensitiveLog: (
  obj: GetLifecyclePolicyResponse
) => any;
export declare const LifecyclePolicyPreviewFilterFilterSensitiveLog: (
  obj: LifecyclePolicyPreviewFilter
) => any;
export declare const GetLifecyclePolicyPreviewRequestFilterSensitiveLog: (
  obj: GetLifecyclePolicyPreviewRequest
) => any;
export declare const LifecyclePolicyRuleActionFilterSensitiveLog: (
  obj: LifecyclePolicyRuleAction
) => any;
export declare const LifecyclePolicyPreviewResultFilterSensitiveLog: (
  obj: LifecyclePolicyPreviewResult
) => any;
export declare const LifecyclePolicyPreviewSummaryFilterSensitiveLog: (
  obj: LifecyclePolicyPreviewSummary
) => any;
export declare const GetLifecyclePolicyPreviewResponseFilterSensitiveLog: (
  obj: GetLifecyclePolicyPreviewResponse
) => any;
export declare const GetRegistryPolicyRequestFilterSensitiveLog: (
  obj: GetRegistryPolicyRequest
) => any;
export declare const GetRegistryPolicyResponseFilterSensitiveLog: (
  obj: GetRegistryPolicyResponse
) => any;
export declare const GetRegistryScanningConfigurationRequestFilterSensitiveLog: (
  obj: GetRegistryScanningConfigurationRequest
) => any;
export declare const RegistryScanningRuleFilterSensitiveLog: (
  obj: RegistryScanningRule
) => any;
export declare const RegistryScanningConfigurationFilterSensitiveLog: (
  obj: RegistryScanningConfiguration
) => any;
export declare const GetRegistryScanningConfigurationResponseFilterSensitiveLog: (
  obj: GetRegistryScanningConfigurationResponse
) => any;
export declare const GetRepositoryPolicyRequestFilterSensitiveLog: (
  obj: GetRepositoryPolicyRequest
) => any;
export declare const GetRepositoryPolicyResponseFilterSensitiveLog: (
  obj: GetRepositoryPolicyResponse
) => any;
export declare const InitiateLayerUploadRequestFilterSensitiveLog: (
  obj: InitiateLayerUploadRequest
) => any;
export declare const InitiateLayerUploadResponseFilterSensitiveLog: (
  obj: InitiateLayerUploadResponse
) => any;
export declare const ListImagesFilterFilterSensitiveLog: (
  obj: ListImagesFilter
) => any;
export declare const ListImagesRequestFilterSensitiveLog: (
  obj: ListImagesRequest
) => any;
export declare const ListImagesResponseFilterSensitiveLog: (
  obj: ListImagesResponse
) => any;
export declare const ListTagsForResourceRequestFilterSensitiveLog: (
  obj: ListTagsForResourceRequest
) => any;
export declare const ListTagsForResourceResponseFilterSensitiveLog: (
  obj: ListTagsForResourceResponse
) => any;
export declare const PutImageRequestFilterSensitiveLog: (
  obj: PutImageRequest
) => any;
export declare const PutImageResponseFilterSensitiveLog: (
  obj: PutImageResponse
) => any;
export declare const PutImageScanningConfigurationRequestFilterSensitiveLog: (
  obj: PutImageScanningConfigurationRequest
) => any;
export declare const PutImageScanningConfigurationResponseFilterSensitiveLog: (
  obj: PutImageScanningConfigurationResponse
) => any;
export declare const PutImageTagMutabilityRequestFilterSensitiveLog: (
  obj: PutImageTagMutabilityRequest
) => any;
export declare const PutImageTagMutabilityResponseFilterSensitiveLog: (
  obj: PutImageTagMutabilityResponse
) => any;
export declare const PutLifecyclePolicyRequestFilterSensitiveLog: (
  obj: PutLifecyclePolicyRequest
) => any;
export declare const PutLifecyclePolicyResponseFilterSensitiveLog: (
  obj: PutLifecyclePolicyResponse
) => any;
export declare const PutRegistryPolicyRequestFilterSensitiveLog: (
  obj: PutRegistryPolicyRequest
) => any;
export declare const PutRegistryPolicyResponseFilterSensitiveLog: (
  obj: PutRegistryPolicyResponse
) => any;
export declare const PutRegistryScanningConfigurationRequestFilterSensitiveLog: (
  obj: PutRegistryScanningConfigurationRequest
) => any;
export declare const PutRegistryScanningConfigurationResponseFilterSensitiveLog: (
  obj: PutRegistryScanningConfigurationResponse
) => any;
export declare const PutReplicationConfigurationRequestFilterSensitiveLog: (
  obj: PutReplicationConfigurationRequest
) => any;
export declare const PutReplicationConfigurationResponseFilterSensitiveLog: (
  obj: PutReplicationConfigurationResponse
) => any;
export declare const SetRepositoryPolicyRequestFilterSensitiveLog: (
  obj: SetRepositoryPolicyRequest
) => any;
export declare const SetRepositoryPolicyResponseFilterSensitiveLog: (
  obj: SetRepositoryPolicyResponse
) => any;
export declare const StartImageScanRequestFilterSensitiveLog: (
  obj: StartImageScanRequest
) => any;
export declare const StartImageScanResponseFilterSensitiveLog: (
  obj: StartImageScanResponse
) => any;
export declare const StartLifecyclePolicyPreviewRequestFilterSensitiveLog: (
  obj: StartLifecyclePolicyPreviewRequest
) => any;
export declare const StartLifecyclePolicyPreviewResponseFilterSensitiveLog: (
  obj: StartLifecyclePolicyPreviewResponse
) => any;
export declare const TagResourceRequestFilterSensitiveLog: (
  obj: TagResourceRequest
) => any;
export declare const TagResourceResponseFilterSensitiveLog: (
  obj: TagResourceResponse
) => any;
export declare const UntagResourceRequestFilterSensitiveLog: (
  obj: UntagResourceRequest
) => any;
export declare const UntagResourceResponseFilterSensitiveLog: (
  obj: UntagResourceResponse
) => any;
export declare const UploadLayerPartRequestFilterSensitiveLog: (
  obj: UploadLayerPartRequest
) => any;
export declare const UploadLayerPartResponseFilterSensitiveLog: (
  obj: UploadLayerPartResponse
) => any;
